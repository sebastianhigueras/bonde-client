workspace:
  base: /code

pipeline:
  unit-tests:
    image: node:latest
    commands:
      - yarn install
      - yarn test:ci
      - cd mob-render
      - yarn install
    when:
      event: [push, tag]

  build-client-staging:
    image: node:latest
    group: concurrent-build
    environment:
      - NODE_ENV=production
      - API_URL=https://api.staging.bonde.org
      - BOT_URL=https://beta.staging.bonde.org
      - GRAPHQL_URL=https://data.staging.bonde.org/graphql
      - APP_DOMAIN=staging.bonde.org
      - AWS_BUCKET=bonde-assets-staging
    commands:
      - export PAGARME_KEY=$STAG_PAGARME_KEY
      - export SENTRY_DSN_PUBLIC=$STAG_SENTRY_DSN_PUBLIC
      - export GOOGLE_FONTS_API_KEY=$STAG_GOOGLE_FONTS_API_KEY
      - mkdir build
      - yarn run build:client
    secrets: [ stag_pagarme_key, stag_sentry_dsn_public, stag_google_fonts_api_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  build-server-staging:
    image: node:latest
    group: concurrent-build
    environment:
      - NODE_ENV=production
      - API_URL=https://api.staging.bonde.org
      - BOT_URL=https://beta.staging.bonde.org
      - GRAPHQL_URL=https://data.staging.bonde.org/graphql
      - APP_DOMAIN=staging.bonde.org
      - AWS_BUCKET=bonde-assets-staging
    commands:
      - export PAGARME_KEY=$STAG_PAGARME_KEY
      - export SENTRY_DSN_PUBLIC=$STAG_SENTRY_DSN_PUBLIC
      - export GOOGLE_FONTS_API_KEY=$STAG_GOOGLE_FONTS_API_KEY
      - cd mob-render
      - ./node_modules/.bin/next build
    secrets: [ stag_pagarme_key, stag_sentry_dsn_public, stag_google_fonts_api_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  publish-server-staging:
    image: plugins/docker
    repo: nossas/bonde-client
    secrets: [ docker_username, docker_password ]
    tags:
      - ${DRONE_BRANCH}
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  publish-client-staging:
    image: nossas/s3cmd
    group: concurrent
    commands:
      - echo access_key=$AWS_ACCESS_KEY_ID >> ~/.s3cfg
      - echo secret_key=$AWS_SECRET_ACCESS_KEY >> ~/.s3cfg
      - s3cmd --acl-public --rexclude='\.svg$|\.html$|\.ttf$|\.eot$|\.png$|\.otf|woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$' --add-header='Content-Encoding:gzip' --add-header='Cache-Control:max-age=3600' sync public/ s3://bonde-assets-staging
      - s3cmd --acl-public --exclude='*' --rinclude='\.svg$|\.html$|\.ttf$|\.eot$|\.png$|\.otf|woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$' --add-header='Cache-Control:max-age=3600' sync public/ s3://bonde-assets-staging
    secrets: [ aws_access_key_id, aws_secret_access_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  deploy-staging:
    image: peloton/drone-rancher
    group: concurrent
    url: http://cluster.bonde.org
    service: staging/client
    docker_image: nossas/bonde-client:${DRONE_BRANCH}
    timeout: 360
    confirm: true
    secrets: [ rancher_access_key, rancher_secret_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  deploy-staging-non-ssl:
    image: peloton/drone-rancher
    group: concurrent
    url: http://cluster.bonde.org
    service: staging/client-non-ssl
    docker_image: nossas/bonde-client:${DRONE_BRANCH}
    timeout: 360
    confirm: true
    secrets: [ rancher_access_key, rancher_secret_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  build-client-production:
    image: node:latest
    environment:
      - NODE_ENV=production
      - API_URL=https://api.bonde.org
      - BOT_URL=https://beta.bonde.org
      - GRAPHQL_URL=https://data.bonde.org/graphql
      - APP_DOMAIN=bonde.org
      - AWS_BUCKET=bonde-assets
    commands:
      - export PAGARME_KEY=$PROD_PAGARME_KEY
      - export SENTRY_DSN_PUBLIC=$PROD_SENTRY_DSN_PUBLIC
      - export GOOGLE_FONTS_API_KEY=$PROD_GOOGLE_FONTS_API_KEY
      - mkdir build
      - yarn run build:client
    secrets: [ prod_pagarme_key, prod_sentry_dsn_public, prod_google_fonts_api_key ]
    when:
      status: success
      event: tag

  build-server-production:
    image: node:latest
    environment:
      - NODE_ENV=production
      - API_URL=https://api.bonde.org
      - BOT_URL=https://beta.bonde.org
      - GRAPHQL_URL=https://data.bonde.org/graphql
      - APP_DOMAIN=bonde.org
      - AWS_BUCKET=bonde-assets
    commands:
      - export PAGARME_KEY=$PROD_PAGARME_KEY
      - export SENTRY_DSN_PUBLIC=$PROD_SENTRY_DSN_PUBLIC
      - export GOOGLE_FONTS_API_KEY=$PROD_GOOGLE_FONTS_API_KEY
      - yarn run build:server
    secrets: [ prod_pagarme_key, prod_sentry_dsn_public, prod_google_fonts_api_key ]
    when:
      status: success
      event: tag

  publish-server-production:
    image: plugins/docker
    repo: nossas/bonde-client
    secrets: [ docker_username, docker_password ]
    tags:
      - ${DRONE_TAG##v}
    when:
      status: success
      event: tag

  publish-client-production:
    image: nossas/s3cmd
    group: concurrent
    commands:
      - echo access_key=$AWS_ACCESS_KEY_ID >> ~/.s3cfg
      - echo secret_key=$AWS_SECRET_ACCESS_KEY >> ~/.s3cfg
      - s3cmd --acl-public --include='*' --rexclude='\.svg$|\.ttf$|\.eot$|\.png$|\.otf|woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$' --add-header='Content-Encoding:gzip' --add-header='Cache-Control:max-age=3600' sync public/ s3://bonde-assets
      - s3cmd --acl-public --exclude='*' --rinclude='\.svg$|\.ttf$|\.eot$|\.png$|\.otf|woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$' --add-header='Cache-Control:max-age=3600' sync public/ s3://bonde-assets
    secrets: [ aws_access_key_id, aws_secret_access_key ]
    when:
      status: success
      event: tag

  deploy-production:
    image: appleboy/drone-ssh
    group: concurrent
    host: ssh.bonde.org
    username: ubuntu
    command_timeout: 360
    port: 22
    secrets: [ ssh_key ]
    script:
      - sudo docker pull nossas/bonde-client:${DRONE_TAG##v}
      - sudo docker tag nossas/bonde-client:${DRONE_TAG##v} dokku/0-client:latest
      - sudo docker tag nossas/bonde-client:${DRONE_TAG##v} dokku/app-client:latest
      - dokku tags:deploy 0-client latest
      - dokku tags:deploy app-client latest
    when:
      status: success
      event: tag

  notify:
    image: plugins/slack
    webhook: https://hooks.slack.com/services/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
    channel: bonde_bots
    username: CI - ${DRONE_REPO_NAME}
    when:
      event: [ push, tag, build, publish, deployment, pull_request ]
      status: [ success, failure ]
